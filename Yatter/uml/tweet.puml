@startuml

package domain {
  class Me
  interface UserRepository {
    + findMe(): Me?
    + findByUsername(username: Username): User?
    + create(...)
    + update(...)
  }

  interface GetMeService {
    + execute(): Me?
  }

  interface YweetRepository {
    + create(...): Yweet
  }
}

package infra {
  package domain {
    class MeImpl
    package repository {
      class UserRepositoryImpl {
        - mePreferences: MePreferences
        - yatterApi: YatterApi
      }

      class YweetRepositoryImpl {
        - mePreferences: MePreferences
        - yatterApi: YatterApi
      }
    }
    package service {
      class GetMeServiceImpl {
        - userRepository: UserRepository
      }
    }
  }
}

package usecase {
  interface PostYweetUseCase {
    + execute(yweetText: String): PostYweetUseCaseResult
  }

  class PostYweetUseCaseImpl {
    - yweetRepository: YweetRepository
  }

  class PostYweetUseCaseResult
}

package ui.post {
  class PostViewModel {
    - postYweetUseCase: PostYweetUseCase
    - getMeService: GetMeService

    + uiState: StateFlow<PostUiState>
    + destination: StateFlow<Destination?>

    + onCreate()
    + onChangedYweetText(yweetText: String)
    + onClickPost()
    + onClickNavIcon()
    + onCompleteNavigation()
  }

  class PostUiState {
    + bindingModel: PostBindingModel
    + isLoading: Boolean
    + canPost: Boolean
  }

  class PostBindingModel {
    + avatarUrl: String?
    + yweetText: String
  }
}

MeImpl --|> Me
UserRepository -- Me
GetMeService -- Me

GetMeServiceImpl --|> GetMeService
UserRepositoryImpl --|> UserRepository
YweetRepositoryImpl --|> YweetRepository

GetMeService -- UserRepository

PostYweetUseCaseImpl --|> PostYweetUseCase
PostYweetUseCase -- PostYweetUseCaseResult
PostYweetUseCaseImpl -- YweetRepository

PostViewModel -- PostUiState
PostUiState -- PostBindingModel

PostViewModel -- PostYweetUseCase
PostViewModel -- GetMeService
@enduml